/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import { PrismaService } from "../../prisma/prisma.service";
import { Prisma, Forecast as PrismaForecast } from "@prisma/client";

export class ForecastServiceBase {
  constructor(protected readonly prisma: PrismaService) {}

  async count(args: Omit<Prisma.ForecastCountArgs, "select">): Promise<number> {
    return this.prisma.forecast.count(args);
  }

  async forecasts(
    args: Prisma.ForecastFindManyArgs
  ): Promise<PrismaForecast[]> {
    return this.prisma.forecast.findMany(args);
  }
  async forecast(
    args: Prisma.ForecastFindUniqueArgs
  ): Promise<PrismaForecast | null> {
    return this.prisma.forecast.findUnique(args);
  }
  async createForecast(
    args: Prisma.ForecastCreateArgs
  ): Promise<PrismaForecast> {
    return this.prisma.forecast.create(args);
  }
  async updateForecast(
    args: Prisma.ForecastUpdateArgs
  ): Promise<PrismaForecast> {
    return this.prisma.forecast.update(args);
  }
  async deleteForecast(
    args: Prisma.ForecastDeleteArgs
  ): Promise<PrismaForecast> {
    return this.prisma.forecast.delete(args);
  }
}
