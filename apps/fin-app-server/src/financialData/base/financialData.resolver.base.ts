/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import * as nestAccessControl from "nest-access-control";
import * as gqlACGuard from "../../auth/gqlAC.guard";
import { GqlDefaultAuthGuard } from "../../auth/gqlDefaultAuth.guard";
import * as common from "@nestjs/common";
import { AclFilterResponseInterceptor } from "../../interceptors/aclFilterResponse.interceptor";
import { AclValidateRequestInterceptor } from "../../interceptors/aclValidateRequest.interceptor";
import { FinancialData } from "./FinancialData";
import { FinancialDataCountArgs } from "./FinancialDataCountArgs";
import { FinancialDataFindManyArgs } from "./FinancialDataFindManyArgs";
import { FinancialDataFindUniqueArgs } from "./FinancialDataFindUniqueArgs";
import { CreateFinancialDataArgs } from "./CreateFinancialDataArgs";
import { UpdateFinancialDataArgs } from "./UpdateFinancialDataArgs";
import { DeleteFinancialDataArgs } from "./DeleteFinancialDataArgs";
import { FinancialDataService } from "../financialData.service";
@common.UseGuards(GqlDefaultAuthGuard, gqlACGuard.GqlACGuard)
@graphql.Resolver(() => FinancialData)
export class FinancialDataResolverBase {
  constructor(
    protected readonly service: FinancialDataService,
    protected readonly rolesBuilder: nestAccessControl.RolesBuilder
  ) {}

  @graphql.Query(() => MetaQueryPayload)
  @nestAccessControl.UseRoles({
    resource: "FinancialData",
    action: "read",
    possession: "any",
  })
  async _financialDataItemsMeta(
    @graphql.Args() args: FinancialDataCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => [FinancialData])
  @nestAccessControl.UseRoles({
    resource: "FinancialData",
    action: "read",
    possession: "any",
  })
  async financialDataItems(
    @graphql.Args() args: FinancialDataFindManyArgs
  ): Promise<FinancialData[]> {
    return this.service.financialDataItems(args);
  }

  @common.UseInterceptors(AclFilterResponseInterceptor)
  @graphql.Query(() => FinancialData, { nullable: true })
  @nestAccessControl.UseRoles({
    resource: "FinancialData",
    action: "read",
    possession: "own",
  })
  async financialData(
    @graphql.Args() args: FinancialDataFindUniqueArgs
  ): Promise<FinancialData | null> {
    const result = await this.service.financialData(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FinancialData)
  @nestAccessControl.UseRoles({
    resource: "FinancialData",
    action: "create",
    possession: "any",
  })
  async createFinancialData(
    @graphql.Args() args: CreateFinancialDataArgs
  ): Promise<FinancialData> {
    return await this.service.createFinancialData({
      ...args,
      data: args.data,
    });
  }

  @common.UseInterceptors(AclValidateRequestInterceptor)
  @graphql.Mutation(() => FinancialData)
  @nestAccessControl.UseRoles({
    resource: "FinancialData",
    action: "update",
    possession: "any",
  })
  async updateFinancialData(
    @graphql.Args() args: UpdateFinancialDataArgs
  ): Promise<FinancialData | null> {
    try {
      return await this.service.updateFinancialData({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => FinancialData)
  @nestAccessControl.UseRoles({
    resource: "FinancialData",
    action: "delete",
    possession: "any",
  })
  async deleteFinancialData(
    @graphql.Args() args: DeleteFinancialDataArgs
  ): Promise<FinancialData | null> {
    try {
      return await this.service.deleteFinancialData(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
